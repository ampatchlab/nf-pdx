manifest {

  author = 'Stephen Kazakoff'
  homePage = 'https://github.com/ampatchlab/nf-pdx'
  description = 'Patient-derived xenograft Nextflow pipeline'
  version = '0.3.1'
}

params {

  readgroup_csv = null

  germline_csv = null
  somatic_csv = null

  human_genome = 'GRCh38'

  human_genomes {
    'GRCh38' {
      ref_fasta = 'ftp://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz'
      vep_cache = 'ftp://ftp.ensembl.org/pub/release-104/variation/indexed_vep_cache/homo_sapiens_vep_104_GRCh38.tar.gz'
    }
  }

  mouse_genome = 'GRCm39'

  mouse_genomes {
    'GRCm39' {
      ref_fasta = 'ftp://ftp.ensembl.org/pub/release-104/fasta/mus_musculus/dna/Mus_musculus.GRCm39.dna.primary_assembly.fa.gz'
      vep_cache = 'ftp://ftp.ensembl.org/pub/release-104/variation/indexed_vep_cache/mus_musculus_vep_104_GRCm39.tar.gz'
    }
  }

  adapters = null

  adapter_files {
    'TruSeq' {
      r1_adapters = "${baseDir}/resource-adapters/TruSeq-1.fa"
      r2_adapters = "${baseDir}/resource-adapters/TruSeq-2.fa"
    }
    'NexteraTransposase' {
      r1_adapters = "${baseDir}/resource-adapters/NexteraTransposase-1.fa"
      r2_adapters = "${baseDir}/resource-adapters/NexteraTransposase-2.fa"
    }
    'BGISeq' {
      r1_adapters = "${baseDir}/resource-adapters/BGISeq-1.fa"
      r2_adapters = "${baseDir}/resource-adapters/BGISeq-2.fa"
    }
  }

  // MultiQC params
  multiqc_config = "${baseDir}/multiqc/multiqc_config.yaml"

  // output params
  publish_dir = './results'
  publish_mode = 'copy'

  // process skip params
  params.skip_qualimap = false
  params.skip_mosdepth = false

  // publish params
  publish_concat_ref_genomes = true
  publish_mark_duplicates = true
  publish_vep = true
  publish_vepvcf2tsv = true
  publish_vcf2maf = true
  publish_multiqc = true

  // report params
  execution_report = './reports/execution_report.html'
  trace_report = './reports/trace_report.txt'
  timeline_report = './reports/timeline_report.html'
  flowchart = './reports/flowchart.png'

  // AWS Batch options
  aws_queue = false
  aws_region = false

  // standard options
  help = false
  version = false
}

process {

  shell = [ '/bin/bash', '-euo', 'pipefail' ]
}

report {

  enabled = true
  file = params.execution_report
}

trace {

  enabled = true
  file = params.trace_report
}

timeline {

  enabled = true
  file = params.timeline_report
}

dag {

  enabled = true
  file = params.flowchart
}

includeConfig 'conf/base.config'

profiles {

  'awsbatch' {
    includeConfig 'conf/containers.config'
    includeConfig 'conf/awsbatch.config'
  }

  'conda' {
    includeConfig 'conf/conda.config'
  }

  'docker' {
    includeConfig 'conf/containers.config'
    docker.enabled = true
  }

  'singularity' {
    includeConfig 'conf/containers.config'
    singularity.enabled = true
  }

  // institute configs

  'qimrb' {
    includeConfig 'conf/qimrb.config'
  }

  // test configs

  'NA12878_C57BL_6NJ-SE' {
    includeConfig 'tests/NA12878_C57BL_6NJ-SE.config'
  }

  'NA12878_C57BL_6NJ-PE' {
    includeConfig 'tests/NA12878_C57BL_6NJ-PE.config'
  }
}

def max_cpus(cpus) {
    return cpus > params.max_cpus ? params.max_cpus : cpus
}

def max_memory(memory) {
    return memory > params.max_memory ? params.max_memory : memory
}

def max_time(time) {
    return time > params.max_time ? params.max_time : time
}
